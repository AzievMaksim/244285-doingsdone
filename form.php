<?php
    // вырезаем все теги ( почему до проверки наличия - было в примере. кажется это НЕ правильно.
$name = htmlspecialchars($_POST['name']);
$date = htmlspecialchars($_POST['date']);

if (!empty($_POST['submit'])) {
    header.location 'OK';
} else {
    echo 'алло, где данные? ))';
}

/*

    // проверяем наличие отправленных данных в POST - да: то двигаемся дальше; нет : возвращаемся на исходную страницу без формы
if (!empty($_POST)) {

    // если поле "название" или поле "дата" пустые - возвращаемся на представление формы с указанием на ошибки (включаем класс "form__input--error" в этом поле)
if (!empty($_POST['name']))

    //проверяем данные в полях на соответствие - если да: отпраавляем в массив вырезая теги(?); если нет - возращаем форму с указанием на ошибку "form__input--error"


    // если все ок-заполнено - отправляем данные в массив и возвращаемся на исходную страницу с задачами без overlay
} else {
require_once './index.php?add';
}


	$valid_name = '';
	$valid_email = '';

	// Следующая проверка, в которой учитывается значение дескриптора
	// Submit из приведенной ниже формы, позволяет узнать, не произошло
	// ли развертывание формы впервые (это позволяет сохранить введенные данные пользователем,
	// при повторной отправке формы)
	if (!isset($_POST['submit']))
    {
        $_POST['name'] = '';
        $_POST['email'] = '';
    }
    else
    {
        $name = htmlentities($_POST['name']);
        $email = htmlentities($_POST['email']);

        // Выполняем проверку формы, поля не должны быть пустыми,
        // а поле email должно содержать строку формата адреса электронной почты
        // (эти переменные указываются в форме в полях input в качестве атрибута class)
        $valid_name = !empty($name) ? '' : 'error';

        if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL))
        {
            $valid_email = 'error';
        }
    }
*/
?>

